# Устанавливаем максимальную длину строки для кода.
line-length = 120

[lint]
# Выбираем правила, которые должен применять линтер.
select = [
    "A",    # flake8-builtins | Выявления случаев, когда имена переменных, аргументов функций или атрибутов классов затеняют встроенные имена Python
    "ARG",  # flake8-unused-arguments | Выявление неиспользуемых аргументов в функциях, методах, классах, статических методах и лямбда-функциях
    "ASYNC",# flake8-async | Выявление ошибок с асинхронностью
    "B",    # flake8-bugbear | Находит общие ошибки и неоднозначности в коде
    "C",    # flake8-comprehensions | Проверка стилевых ошибок, которые связаны с соглашениями кодирования convention messages
    "C4",   # flake8-comprehensions | Проверяет правильность и эффективность использования list, set, dict comprehensions
    "C90",  # mccabe | Проверка сложности функций
    "DTZ",  # flake8-datetimez | Выявление проблем использования объектов даты и времени без учета временных зон
    "E",    # pycodestyle errors |
    "F",    # pyflakes | Ошибки, такие как неиспользуемые импорты и переменные
    "FURB", # refurb | Выявление и предложение улучшений в коде, связанных с использованием более эффективных, чистых или современных практик программирования
    "I",    # isort | Правила для сортировки импортов
    "ISC",  # flake8-implicit-str-concat | Проверяет использование неэффективной конкатенации строк
    "N",    # pep8-naming | Соблюдение соглашения о наименовании
    "PERF", # perflint | Правила, направленные на выявление потенциальных проблем с производительностью
    "PIE",  # flake8-pie |
    "RUF",  # Ruff | Мелочи от Ruff
    "SIM",  # flake8-simplify | Проверяет наличие ненужной вложенности нескольких последовательных менеджеров контекста.
    "T20",  # flake8-print | Выявления случаев, использование отладчика в продакшен-коде
    "UP",   # pyupgrade | Новых функций языка и замену устаревших конструкций на более эффективные и безопасные аналоги
    "W",    # pycodestyle warnings |
]
# Исключаем директории и файлы из линтинга
exclude = [".venv", "__pycache__", ".vscode", ".git", "**/alembic/**", "pgdata"]

# Игнорируем конкретные предупреждения линтера
ignore = [
    "B008", # Игнорирование предупреждения от flake8-bugbear, который указывает на проблему использования вызовов любых "вызываемых" объектов в качестве значений аргументов по умолчанию
    "RUF001", # Игнорирование похожих символов с разными ASCII
    "RUF002", # Игнорирование похожих символов с разными ASCII
    "RUF003", # Игнорирование похожих символов с разными ASCII
    "DTZ005", # DT now
    "PERF401", # list comprehesion instead of .append()
]

# Расширенное игнорирование для отдельных файлов
[lint.extend-per-file-ignores]
"__init__.py" = ["E402", "F401"] # Игнорирование ошибок импорта


[format]
# Устанавливаем предпочтительный стиль кавычек
quote-style = "double" # 'single' для одинарных, "double" для двойных кавычек

[lint.mccabe]
# Устанавливаем максимально допустимую сложность функций и методов
max-complexity = 15

[lint.isort]
# Сортировка импортов с учетом регистра - под вопросом
case-sensitive = true
